{"version":3,"sources":["util.js","App.js","serviceWorker.js","index.js"],"names":["getViewStateFromHash","hash","charAt","hashArray","substring","split","map","Number","val","isFinite","zoom","latitude","longitude","viewState","bearing","pitch","Object","keys","forEach","key","defaultViewport","App","state","viewport","window","location","usgsTopoUrl","baseUrl","URLSearchParams","url","toString","this","width","height","mapOptions","mapStyle","onViewportChange","setState","id","type","minzoom","maxzoom","tiles","tileSize","React","Component","Boolean","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"2RAKO,SAASA,EAAqBC,GACnC,GAAKA,GAA2B,MAAnBA,EAAKC,OAAO,GAAzB,CAKA,IAAIC,EAAYF,EAEbG,UAAU,GACVC,MAAM,KACNC,IAAIC,QAVkC,EAazCJ,EAAYA,EAAUG,KAAI,SAAAE,GAAG,OAAKD,OAAOE,SAASD,IAAQA,GAAQ,QAbzB,mBAiBlCE,EAjBkC,KAiB5BC,EAjB4B,KAiBlBC,EAjBkB,KAkBnCC,EAAY,CAChBC,QAnBuC,KAoBvCH,WACAC,YACAG,MAtBuC,KAuBvCL,QASF,OAJAM,OAAOC,KAAKJ,GAAWK,SACrB,SAAAC,GAAG,OAAsB,MAAlBN,EAAUM,WAAuBN,EAAUM,MAG7CN,GChCT,IAAMO,EAAkB,CACtBT,SAAU,SACVC,WAAY,UACZF,KAAM,MACNI,QAAS,EACTC,MAAO,GA+CMM,E,4MA3CbC,MAAQ,CACNC,SAAS,eACJH,EADG,GAEHpB,EAAqBwB,OAAOC,SAASxB,Q,EAI5CyB,YAAc,WACZ,IAIIC,EACF,wEAEF,OADAA,GAHqB,IAAIC,gBAHV,CACbC,IAAK,6CAKiBC,Y,uDAIhB,IAAD,OACP,OACE,kBAAC,IAAD,iBACMC,KAAKT,MAAMC,SADjB,CAEES,MAAM,QACNC,OAAO,QACPC,WAAY,CAAEjC,MAAM,GACpBkC,SAAS,sFACTC,iBAAkB,SAAAb,GAAQ,OAAI,EAAKc,SAAS,CAAEd,gBAE9C,kBAAC,IAAD,CACEe,GAAG,YACHC,KAAK,SACLC,QAAS,GACTC,QAAS,GACTC,MAAO,CAACX,KAAKL,eACbiB,SAAU,KAEV,kBAAC,IAAD,CAAOL,GAAG,oBAAoBC,KAAK,SAASC,QAAS,W,GArC7CI,IAAMC,WCDJC,QACW,cAA7BtB,OAAOC,SAASsB,UAEe,UAA7BvB,OAAOC,SAASsB,UAEhBvB,OAAOC,SAASsB,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.f7c8c7cb.chunk.js","sourcesContent":["/**\n * Get ViewState from page URL hash\n * Note: does not necessarily return all viewState fields\n * @param {string} hash Page URL hash\n */\nexport function getViewStateFromHash(hash) {\n  if (!hash || hash.charAt(0) !== '#') {\n    return;\n  }\n\n  // Split the hash into an array of numbers\n  let hashArray = hash\n    // Remove # symbol\n    .substring(1)\n    .split('/')\n    .map(Number);\n\n  // Remove non-numeric values\n  hashArray = hashArray.map(val => (Number.isFinite(val) && val) || null);\n\n  // Order of arguments:\n  // https://docs.mapbox.com/mapbox-gl-js/api/\n  const [zoom, latitude, longitude, bearing, pitch] = hashArray;\n  const viewState = {\n    bearing,\n    latitude,\n    longitude,\n    pitch,\n    zoom,\n  };\n\n  // Delete null keys\n  // https://stackoverflow.com/a/38340730\n  Object.keys(viewState).forEach(\n    key => viewState[key] == null && delete viewState[key]\n  );\n\n  return viewState;\n}\n","import React from \"react\";\nimport \"./App.css\";\nimport ReactMapGL, { Source, Layer } from \"react-map-gl\";\nimport { getViewStateFromHash } from \"./util\";\n\nconst defaultViewport = {\n  latitude: 36.08507,\n  longitude: -112.08867,\n  zoom: 12.66,\n  bearing: 0,\n  pitch: 0\n};\n\nclass App extends React.Component {\n  state = {\n    viewport: {\n      ...defaultViewport,\n      ...getViewStateFromHash(window.location.hash)\n    }\n  };\n\n  usgsTopoUrl = () => {\n    const params = {\n      url: \"dynamodb://us-west-2/usgs-topo-latest.v1\"\n    };\n    const searchParams = new URLSearchParams(params);\n    let baseUrl =\n      \"https://us-west-2-lambda.kylebarron.dev/usgs-topo/{z}/{x}/{y}@2x.jpg?\";\n    baseUrl += searchParams.toString();\n    return baseUrl;\n  };\n\n  render() {\n    return (\n      <ReactMapGL\n        {...this.state.viewport}\n        width=\"100vw\"\n        height=\"100vh\"\n        mapOptions={{ hash: true }}\n        mapStyle=\"https://raw.githubusercontent.com/kylebarron/fiord-color-gl-style/master/style.json\"\n        onViewportChange={viewport => this.setState({ viewport })}\n      >\n        <Source\n          id=\"usgs-topo\"\n          type=\"raster\"\n          minzoom={11}\n          maxzoom={16}\n          tiles={[this.usgsTopoUrl()]}\n          tileSize={512}\n        >\n          <Layer id=\"naip-lambda-layer\" type=\"raster\" minzoom={11} />\n        </Source>\n      </ReactMapGL>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}