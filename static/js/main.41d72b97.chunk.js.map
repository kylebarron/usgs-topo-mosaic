{"version":3,"sources":["util.js","App.js","serviceWorker.js","index.js"],"names":["getViewStateFromHash","hash","charAt","hashArray","substring","split","map","Number","val","isFinite","zoom","latitude","longitude","viewState","bearing","pitch","Object","keys","forEach","key","defaultMapStyle","require","defaultViewport","urls","high","newest","oldest","medium","low","mosaicChoiceOptions","value","text","scaleChoiceOptions","usgsTopoUrl","url","URLSearchParams","tile_format","toString","constructMapStyle","mosaic_choice","sources","type","attribution","tileSize","Map","App","state","viewport","window","location","scale_choice","opacity","terrainRelief","mapStyle","optionsExpanded","_toggleState","name","setState","prevState","_onChangeOpacity","e","this","width","height","mapOptions","onViewportChange","maxzoom","source","id","beforeId","paint","layout","visibility","minzoom","encoding","tiles","style","position","right","top","bottom","left","maxWidth","unit","Container","maxHeight","zIndex","backgroundColor","pointerEvents","overflowY","overflow","Accordion","as","Card","padding","Title","Header","Icon","Content","active","belowMinZoom","Select","options","onChange","data","Checkbox","label","checked","target","rel","href","React","Component","Boolean","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.41d72b97.chunk.js","sourcesContent":["/**\n * Get ViewState from page URL hash\n * Note: does not necessarily return all viewState fields\n * @param {string} hash Page URL hash\n */\nexport function getViewStateFromHash(hash) {\n  if (!hash || hash.charAt(0) !== '#') {\n    return;\n  }\n\n  // Split the hash into an array of numbers\n  let hashArray = hash\n    // Remove # symbol\n    .substring(1)\n    .split('/')\n    .map(Number);\n\n  // Remove non-numeric values\n  hashArray = hashArray.map(val => (Number.isFinite(val) && val) || null);\n\n  // Order of arguments:\n  // https://docs.mapbox.com/mapbox-gl-js/api/\n  const [zoom, latitude, longitude, bearing, pitch] = hashArray;\n  const viewState = {\n    bearing,\n    latitude,\n    longitude,\n    pitch,\n    zoom,\n  };\n\n  // Delete null keys\n  // https://stackoverflow.com/a/38340730\n  Object.keys(viewState).forEach(\n    key => viewState[key] == null && delete viewState[key]\n  );\n\n  return viewState;\n}\n","import React from \"react\";\nimport \"./App.css\";\nimport ReactMapGL, {\n  Source,\n  Layer,\n  NavigationControl,\n  ScaleControl,\n} from \"react-map-gl\";\nimport { getViewStateFromHash } from \"./util\";\nimport {\n  Accordion,\n  Checkbox,\n  Card,\n  Select,\n  Icon,\n  Container,\n} from \"semantic-ui-react\";\nimport { Map } from \"immutable\";\n\nconst defaultMapStyle = require(\"./style.json\");\n\nconst defaultViewport = {\n  latitude: 37.73817,\n  longitude: -119.59118,\n  zoom: 11,\n  bearing: 0,\n  pitch: 0,\n};\n\nconst urls = {\n  high: {\n    newest: \"dynamodb://us-west-2/usgs-topo_high_newest.v2\",\n    oldest: \"dynamodb://us-west-2/usgs-topo_high_oldest.v2\",\n  },\n  medium: {\n    newest: \"dynamodb://us-west-2/usgs-topo_medium_newest.v2\",\n    oldest: \"dynamodb://us-west-2/usgs-topo_medium_oldest.v2\",\n  },\n  low: {\n    newest: \"dynamodb://us-west-2/usgs-topo_low_newest.v2\",\n    oldest: \"dynamodb://us-west-2/usgs-topo_low_oldest.v2\",\n  },\n};\n\nconst mosaicChoiceOptions = [\n  { key: \"oldest\", value: \"oldest\", text: \"Oldest Available\" },\n  { key: \"newest\", value: \"newest\", text: \"Newest Available\" },\n];\n\nconst scaleChoiceOptions = [\n  { key: \"auto\", value: \"auto\", text: \"Auto-adjust map scale used\" },\n  { key: \"low\", value: \"low\", text: \"Small-scale map\" },\n  { key: \"medium\", value: \"medium\", text: \"Medium-scale map\" },\n  { key: \"high\", value: \"high\", text: \"Large-scale map\" },\n];\n\n// Construct tilejson url for mosaic url\nfunction usgsTopoUrl(url) {\n  const params = {\n    url,\n    tile_format: \"jpg\",\n  };\n  const searchParams = new URLSearchParams(params);\n  const baseUrl =\n    \"https://us-west-2-lambda.kylebarron.dev/usgs-topo/tilejson.json?\";\n  return baseUrl + searchParams.toString();\n}\n\nfunction constructMapStyle(mosaic_choice) {\n  defaultMapStyle.sources[\"usgs-topo-low-zoom\"] = {\n    type: \"raster\",\n    url: usgsTopoUrl(urls.low[mosaic_choice]),\n    attribution: '<a href=\"https://www.usgs.gov/\" target=\"_blank\">© USGS</a>',\n    tileSize: 256,\n  };\n  defaultMapStyle.sources[\"usgs-topo-medium-zoom\"] = {\n    type: \"raster\",\n    url: usgsTopoUrl(urls.medium[mosaic_choice]),\n    attribution: '<a href=\"https://www.usgs.gov/\" target=\"_blank\">© USGS</a>',\n    tileSize: 256,\n  };\n  defaultMapStyle.sources[\"usgs-topo-high-zoom\"] = {\n    type: \"raster\",\n    url: usgsTopoUrl(urls.high[mosaic_choice]),\n    attribution: '<a href=\"https://www.usgs.gov/\" target=\"_blank\">© USGS</a>',\n    tileSize: 256,\n  };\n  return Map(defaultMapStyle);\n}\n\nfunction belowMinZoom(scale_choice, zoom) {\n  if (zoom >= 10.5) {\n    return false;\n  }\n  if (scale_choice === \"medium\" && zoom >= 8.5) {\n    return false;\n  }\n  if ((scale_choice === \"low\" || scale_choice === \"auto\") && zoom >= 6.5) {\n    return false;\n  }\n  return true;\n}\n\nclass App extends React.Component {\n  state = {\n    viewport: {\n      ...defaultViewport,\n      ...getViewStateFromHash(window.location.hash),\n    },\n    // Choice of either \"oldest\" or \"newest\" mosaic\n    mosaic_choice: \"oldest\",\n    // Choice of either \"auto\", \"low\", \"medium\", or \"high\" scale\n    scale_choice: \"auto\",\n    opacity: 1,\n    terrainRelief: true,\n    mapStyle: constructMapStyle(\"oldest\"),\n    optionsExpanded: false,\n  };\n\n  _toggleState = (name) => {\n    this.setState((prevState) => ({\n      [name]: !prevState[name],\n    }));\n  };\n\n  _onChangeOpacity = (e, { name, value }) => {\n    this.setState({ [name]: Number(value) });\n  };\n\n  render() {\n    const {\n      mosaic_choice,\n      scale_choice,\n      viewport,\n      opacity,\n      terrainRelief,\n      mapStyle,\n      optionsExpanded,\n    } = this.state;\n    const { latitude, zoom } = viewport;\n    return (\n      <div>\n        <ReactMapGL\n          {...viewport}\n          width=\"100vw\"\n          height=\"100vh\"\n          mapOptions={{ hash: true }}\n          mapStyle={mapStyle}\n          onViewportChange={(viewport) => this.setState({ viewport })}\n        >\n          <Layer\n            maxzoom={scale_choice === \"auto\" ? 10 : 24}\n            source=\"usgs-topo-low-zoom\"\n            id=\"usgs-topo-low-zoom-layer\"\n            type=\"raster\"\n            beforeId=\"place_other\"\n            paint={{\n              \"raster-opacity\": opacity,\n            }}\n            layout={{\n              visibility:\n                scale_choice === \"auto\" || scale_choice === \"low\"\n                  ? \"visible\"\n                  : \"none\",\n            }}\n          />\n\n          <Layer\n            minzoom={scale_choice === \"auto\" ? 10 : 0}\n            // Use mid-scale maps in Alaska on auto\n            maxzoom={scale_choice === \"auto\" && latitude <= 50 ? 12 : 24}\n            source=\"usgs-topo-medium-zoom\"\n            id=\"usgs-topo-medium-zoom-layer\"\n            type=\"raster\"\n            beforeId=\"place_other\"\n            paint={{\n              \"raster-opacity\": opacity,\n            }}\n            layout={{\n              visibility:\n                scale_choice === \"auto\" || scale_choice === \"medium\"\n                  ? \"visible\"\n                  : \"none\",\n            }}\n          />\n          <Layer\n            minzoom={scale_choice === \"auto\" ? 12 : 0}\n            source=\"usgs-topo-high-zoom\"\n            id=\"usgs-topo-high-zoom-layer\"\n            type=\"raster\"\n            beforeId=\"place_other\"\n            paint={{\n              \"raster-opacity\": opacity,\n            }}\n            layout={{\n              visibility:\n                scale_choice === \"auto\" || scale_choice === \"high\"\n                  ? \"visible\"\n                  : \"none\",\n            }}\n          />\n\n          <Source\n            id=\"terrarium\"\n            type=\"raster-dem\"\n            minzoom={0}\n            maxzoom={15}\n            tileSize={256}\n            encoding=\"terrarium\"\n            tiles={[\n              \"https://s3.amazonaws.com/elevation-tiles-prod/terrarium/{z}/{x}/{y}.png\",\n            ]}\n          >\n            <Layer\n              id=\"terrarium-layer\"\n              type=\"hillshade\"\n              paint={{\n                \"hillshade-shadow-color\": \"hsl(39, 21%, 33%)\",\n                \"hillshade-illumination-anchor\": \"map\",\n                \"hillshade-illumination-direction\": 315,\n                \"hillshade-exaggeration\": 0.15,\n              }}\n              layout={{\n                visibility: terrainRelief ? \"visible\" : \"none\",\n              }}\n              beforeId=\"place_other\"\n            />\n          </Source>\n\n          <div style={{ position: \"absolute\", right: 10, top: 10 }}>\n            <NavigationControl />\n          </div>\n\n          <div style={{ position: \"absolute\", bottom: 10, left: 10 }}>\n            <ScaleControl maxWidth={100} unit={\"imperial\"} />\n          </div>\n        </ReactMapGL>\n        <Container\n          style={{\n            position: \"absolute\",\n            width: 280,\n            maxWidth: 500,\n            left: 10,\n            top: 10,\n            maxHeight: \"70%\",\n            zIndex: 1,\n            backgroundColor: \"#fff\",\n            pointerEvents: \"auto\",\n            overflowY: \"auto\",\n            overflow: \"visible\",\n          }}\n        >\n          <Accordion as={Card} style={{ padding: 5 }}>\n            <Accordion.Title\n              as={Card.Header}\n              as=\"h3\"\n              textAlign=\"center\"\n              active={optionsExpanded}\n              index={0}\n              onClick={() => this._toggleState(\"optionsExpanded\")}\n            >\n              <Icon name=\"dropdown\" />\n              USGS Historical Topographic Maps\n            </Accordion.Title>\n            <Accordion.Content active={optionsExpanded}>\n              <p>\n                The entire USGS archive of 183,000 digitized maps created\n                between 1884 and 2006 is publicly accessible online. Explore a\n                portion interactively here.\n              </p>\n\n              {belowMinZoom(scale_choice, zoom) && (\n                <p>Zoom in or change map scale to see map</p>\n              )}\n              <Select\n                style={{ width: \"100%\" }}\n                options={mosaicChoiceOptions}\n                value={mosaic_choice}\n                onChange={(e, data) =>\n                  this.setState({\n                    mosaic_choice: data.value,\n                    mapStyle: constructMapStyle(data.value),\n                  })\n                }\n              />\n              <Select\n                style={{ width: \"100%\" }}\n                options={scaleChoiceOptions}\n                value={scale_choice}\n                onChange={(e, data) =>\n                  this.setState({ scale_choice: data.value })\n                }\n              />\n\n              <Checkbox\n                label=\"Terrain relief shading\"\n                onChange={() => this._toggleState(\"terrainRelief\")}\n                checked={terrainRelief}\n                style={{ padding: 5 }}\n              />\n\n              <p>\n                <p>\n                  <a\n                    target=\"_blank\"\n                    rel=\"noopener noreferrer\"\n                    href=\"https://github.com/kylebarron/usgs-topo-tiler\"\n                  >\n                    <Icon name=\"github\" />\n                    Github\n                  </a>\n                </p>\n                {/* <p>\n                  <a\n                    target=\"_blank\"\n                    rel=\"noopener noreferrer\"\n                    href=\"https://kylebarron.dev/blog\"\n                  >\n                    <Icon name=\"book\" />\n                    Blog post\n                  </a>\n                </p> */}\n              </p>\n            </Accordion.Content>\n          </Accordion>\n        </Container>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}